var documenterSearchIndex = {"docs":
[{"location":"class01/class01/#Class-1-—-08/22/2025","page":"Class 1 — 08/22/2025","title":"Class 1 — 08/22/2025","text":"","category":"section"},{"location":"class01/class01/","page":"Class 1 — 08/22/2025","title":"Class 1 — 08/22/2025","text":"Presenter: Andrew Rosemberg","category":"page"},{"location":"class01/class01/","page":"Class 1 — 08/22/2025","title":"Class 1 — 08/22/2025","text":"Topic: Course map; why PDE-constrained optimization; tooling overview; stability & state-space dynamics; Lyapunov; discretization issues.","category":"page"},{"location":"class01/class01/","page":"Class 1 — 08/22/2025","title":"Class 1 — 08/22/2025","text":"","category":"page"},{"location":"class01/class01/","page":"Class 1 — 08/22/2025","title":"Class 1 — 08/22/2025","text":"In this first class, we will introduce the course, outlining the topics that will be covered and the importance of PDE-constrained optimization. We discuss the tools that will be used throughout the course and provides an overview of stability and state-space dynamics, including Lyapunov stability. The class also touches on discretization issues that arise in the context of PDEs.","category":"page"},{"location":"class01/class01/#Pre-requisites","page":"Class 1 — 08/22/2025","title":"Pre-requisites","text":"","category":"section"},{"location":"class01/class01/","page":"Class 1 — 08/22/2025","title":"Class 1 — 08/22/2025","text":"Mathematical Background: A solid understanding of calculus and linear algebra is essential. Familiarity with differential equations and optimization techniques is also needed.\nProgramming Skills: Intermediate capacity in a programming language such as Julia, Python, or MATLAB is required for implementing the concepts discussed in class.","category":"page"},{"location":"class01/class01/#Background-Material","page":"Class 1 — 08/22/2025","title":"Background Material","text":"","category":"section"},{"location":"class01/class01/","page":"Class 1 — 08/22/2025","title":"Class 1 — 08/22/2025","text":"A few background materials have been selected to help you prepare for the course. Please review these resources before the first class:","category":"page"},{"location":"class01/class01/#**Git**:","page":"Class 1 — 08/22/2025","title":"Git:","text":"","category":"section"},{"location":"class01/class01/","page":"Class 1 — 08/22/2025","title":"Class 1 — 08/22/2025","text":"Familiarity with Git for version control is recommended. Students should be comfortable with basic Git commands and workflows. Go through the Git Basics guide to get started.","category":"page"},{"location":"class01/class01/#**Julia-and-Pluto**:","page":"Class 1 — 08/22/2025","title":"Julia and Pluto:","text":"","category":"section"},{"location":"class01/class01/","page":"Class 1 — 08/22/2025","title":"Class 1 — 08/22/2025","text":"The course will use Julia for programming assignments and projects. If you are new to Julia, go through either or all of these resources until you feel comfortable with the language:","category":"page"},{"location":"class01/class01/","page":"Class 1 — 08/22/2025","title":"Class 1 — 08/22/2025","text":"Julia for Beginners\nParallel Computing and Scientific Machine Learning (SciML): Methods and Applications\nJuMP Julia Tutorial\nJulia ML Course","category":"page"},{"location":"class01/class01/","page":"Class 1 — 08/22/2025","title":"Class 1 — 08/22/2025","text":"Julia is a high-level, general-purpose dynamic programming language, designed to be fast and productive, for e.g. data science, artificial intelligence, machine learning, modeling and simulation, most commonly used for numerical analysis and computational science.","category":"page"},{"location":"class01/class01/","page":"Class 1 — 08/22/2025","title":"Class 1 — 08/22/2025","text":"Pluto is a programming environment for Julia, designed to be interactive and helpful. Like Jupyter but with more features. Some other Example Notebooks","category":"page"},{"location":"class01/class01/","page":"Class 1 — 08/22/2025","title":"Class 1 — 08/22/2025","text":"A few steps to get started with Julia and Pluto:","category":"page"},{"location":"class01/class01/#Step-1:-Install-Julia","page":"Class 1 — 08/22/2025","title":"Step 1: Install Julia","text":"","category":"section"},{"location":"class01/class01/","page":"Class 1 — 08/22/2025","title":"Class 1 — 08/22/2025","text":"Go to https://julialang.org/downloads and download the current stable release, using the correct version for your operating system (Linux x86, Mac, Windows, etc).","category":"page"},{"location":"class01/class01/#Step-2:-Run-Julia","page":"Class 1 — 08/22/2025","title":"Step 2: Run Julia","text":"","category":"section"},{"location":"class01/class01/","page":"Class 1 — 08/22/2025","title":"Class 1 — 08/22/2025","text":"After installing, make sure that you can run Julia.","category":"page"},{"location":"class01/class01/#Step-3:-Install-Pluto-and-other-dependencies","page":"Class 1 — 08/22/2025","title":"Step 3: Install Pluto and other dependencies","text":"","category":"section"},{"location":"class01/class01/","page":"Class 1 — 08/22/2025","title":"Class 1 — 08/22/2025","text":"Just activate and instantiate the project environment (provided in the class folder):","category":"page"},{"location":"class01/class01/","page":"Class 1 — 08/22/2025","title":"Class 1 — 08/22/2025","text":"using Pkg\nPkg.activate(\"path/to/Class01_Folder\")","category":"page"},{"location":"class01/class01/","page":"Class 1 — 08/22/2025","title":"Class 1 — 08/22/2025","text":"Project.toml and Manifest.toml files are provided in the class folder, which will install all the necessary packages for this course at the correct versions.","category":"page"},{"location":"class01/class01/#Step-4:-Start-Pluto","page":"Class 1 — 08/22/2025","title":"Step 4: Start Pluto","text":"","category":"section"},{"location":"class01/class01/","page":"Class 1 — 08/22/2025","title":"Class 1 — 08/22/2025","text":"julia> using Pluto\n\njulia> Pluto.run()","category":"page"},{"location":"class01/class01/#Step-5:-Opening-an-existing-notebook-file","page":"Class 1 — 08/22/2025","title":"Step 5: Opening an existing notebook file","text":"","category":"section"},{"location":"class01/class01/","page":"Class 1 — 08/22/2025","title":"Class 1 — 08/22/2025","text":"To run a local notebook file that you have not opened before, then you need to enter its full path (e.g. path/to/basics_math.jl) into the blue box in the main menu.","category":"page"},{"location":"class01/class01/#**Linear-Algebra**:","page":"Class 1 — 08/22/2025","title":"Linear Algebra:","text":"","category":"section"},{"location":"class01/class01/","page":"Class 1 — 08/22/2025","title":"Class 1 — 08/22/2025","text":"We have prepared a basic (Pluto) Linear Algebra Primer to help you brush up on essential concepts. This primer covers key topics such as matrix operations, eigenvalues, and eigenvectors besides other fundamental calculus concepts. It is recommended to review this primer before the first class.","category":"page"},{"location":"class01/class01/#**Optimization**:","page":"Class 1 — 08/22/2025","title":"Optimization:","text":"","category":"section"},{"location":"class01/class01/","page":"Class 1 — 08/22/2025","title":"Class 1 — 08/22/2025","text":"We will use JuMP for some optimization tasks. If you are new to JuMP, please review the JuMP Tutorial to familiarize yourself with its syntax and capabilities.","category":"page"},{"location":"class01/class01/","page":"Class 1 — 08/22/2025","title":"Class 1 — 08/22/2025","text":"Test your knowledge with this (Pluto) Modeling Exercise.","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"<!– Git Adventure Guide –>","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"Author: Andrew Rosemberg","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"Date: 2025-08-06","category":"page"},{"location":"class01/background_materials/git_adventure_guide/#Git-Adventure-Guide","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"","category":"section"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"A quirky journey from zero to hero with Git","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"Git is like a time machine for your code, a collaboration wizard, and a safety net all rolled into one. This guide will take you through the magical world of Git with fun examples, tips, and mini quests to level up your skills.","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"                               /\\                /\\                /\\\n                              /  \\              /  \\              /  \\\n                             / /\\ \\            / /\\ \\            / /\\ \\\n                            / /  \\ \\          / /  \\ \\          / /  \\ \\\n                           / /____\\ \\        / /____\\ \\        / /____\\ \\\n                          /_/      \\_\\      /_/      \\_\\      /_/      \\_\\\n  ___________________________________________________________________________\n /                                                                           \\\n|    ____ _ _       _     _                _____                              |\n|   / ___(_) |_ ___| |__ (_)_ __   __ _   / ____|                             |\n|  | |  _| | __/ __| '_ \\| | '_ \\ / _` | | |  __  ___ _ __                    |\n|  | |_| | | || (__| | | | | | | | (_| | | | |_ |/ _ \\ '__|                   |\n|   \\____|_|\\__\\___|_| |_|_|_| |_|\\__, | | |__| |  __/ |                      |\n|                                |___/   \\_____|\\___|_|                      |\n|                                                                             |\n|                  ~ ~ ~  G I T   A D V E N T U R E  ~ ~ ~                    |\n \\___________________________________________________________________________/\n                          \\      /            \\      /            \\      /\n                           \\____/              \\____/              \\____/","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"Git is a version control system that helps you track changes in your code, collaborate with others, and manage different versions of your projects. Whether you're a solo developer or part of a team, mastering Git is essential for modern software development.","category":"page"},{"location":"class01/background_materials/git_adventure_guide/#Table-of-Contents","page":"🚀 Git Adventure Guide","title":"📜 Table of Contents","text":"","category":"section"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"🌱 Getting Started\n📚 Core Concepts\n🪄 Everyday Workflow\n🌳 Branching & Merging\n🤝 Collaborating on GitHub\n🧹 Undo & Fix\n🛠️ Advanced Magic\n🎮 Mini Quests\n🧾 Cheat Sheet\n🏁 Next Steps","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"","category":"page"},{"location":"class01/background_materials/git_adventure_guide/#Getting-Started","page":"🚀 Git Adventure Guide","title":"🌱 Getting Started","text":"","category":"section"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"Install Git","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"Git is open-source and available on all major platforms. Here’s how to get it:","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"# macOS\nbrew install git\n\n# Debian/Ubuntu\nsudo apt install git\n\n# Windows\nscoop install git","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"Set Your Identity","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"Versions need an author! Configure your name and email so Git knows who you are:","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"git config --global user.name \"Your Name\"\ngit config --global user.email \"you@example.com\"","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"🧩 Puzzle: Run git config --list — how many settings can you spot?","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"","category":"page"},{"location":"class01/background_materials/git_adventure_guide/#Core-Concepts","page":"🚀 Git Adventure Guide","title":"📚 Core Concepts","text":"","category":"section"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"Concept What It Means Emoji Memory Hack\nRepository (Repo) A project folder under Git’s watch 🗂️\nCommit A snapshot of your code 📸\nBranch A timeline of commits 🌿\nMerge Combine branches 🔀\nRemote A repository living elsewhere 🌐","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"🤓 Did you know? Commits are immutable. They’re like fossils—once created, they never change!","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"","category":"page"},{"location":"class01/background_materials/git_adventure_guide/#Everyday-Workflow","page":"🚀 Git Adventure Guide","title":"🪄 Everyday Workflow","text":"","category":"section"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"Initialize a new repository  ","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"If you’re starting a new project, create a new Git repository:","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"   git init my-awesome-project\n   cd my-awesome-project\n   ```\n\n> 🧩 *Puzzle*: What happens if you run `git init` in a directory that already has a `.git` folder?\n\n> 🏁 *Your Journey Starts*: Initialize a new repository.\n\n1. **Clone** a repo to your local machine\nYou can create a repository directly on GitHub or any other Git hosting service, which will give you a URL to clone it.\n\nOnce you have a remote repository, you can clone it to your local machine:\n   ```bash\n   git clone <url>\n   ```\nThis process will also save the remote repository URL to a variable called `origin`, which is the default name for the remote repository. A repository remote is a version of your repository that is hosted on the internet or another network, allowing you to collaborate with others.\n\n> 🧩 *Puzzle*: Can you have multiple remote copies' URLs stored in your local git configuration?\n\n> 🏗️ *Quest Preparation*: Create a repository on Github. Then, since we started our repository locally, add the URL manually: \n   ```bash\n   git remote add origin <url>\n   ```\n\n2. **Hack away**  \nChanges can be bundled or committed separately. Staging is the process of preparing files for a commit. \nYou can stage specific files or all changes:\n   ```bash\n   git add <files>      # stage\n   git commit -m \"feat: add lunar lasers\"  # snapshot\n   ```\n\nCommits (versions) will store your changes with a message describing what you did.\n\n> 🧩 *Puzzle*: How do you stage all current changes at once?\n\n> 🏗️ *First Quest*: Create a few files and make your first commit(s)\n\n3. **Push** your masterpiece to the remote repository:\nIn order to collaborate with others, you need to push your changes to the remote repository:\n\n   ```bash\n   git push origin main\n   ```\n\n> 🌟 *Pro‑tip*: Use `git add -p` to stage hunks interactively like a choose‑your‑own‑adventure book.\n\n> 🏗️ *Second Quest*: After making a few commits, then push them to the remote repository.\n\n---\n\n## 🌳 Branching & Merging\nA branch is a separate line of development. It allows you to work on features or fixes without affecting the main codebase. This is especially useful for experimenting or developing new features and avoiding breaking the main code besides avoiding conflicts with other developers' work.\nCreate and jump to a branch:\n","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"bash git switch -c <branch-name>","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"\n> 🧩 *Pro-tip*: Name your branch something that helps others infer the author and what you are developing without them needing to look at the meta information of your commits. For example: `ar/feature/gpu-compatibility`, `ar/bugfix/memory-leak`, or `ar/hotfix/security-patch`.\n\nMerge it back - move your changes into the main branch:\n","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"bash git switch main git merge feature/space-pizza","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"\nIf others have made changes to the main branch, you might need to resolve conflicts.\nThe merge command you move you to a temporary state where you can resolve conflicts before finalizing the merge.\nGit will tell you which files are in conflict by marking them in the output. You can also see the conflicts by running:\n","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"bash git status","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"Resolve conflicts like a diplomat—edit the conflicted files, then:\n","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"bash git add . git commit -m \"fix: resolve cosmic cheese conflict\"","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"\n> ⚔️ **Boss Battle**: Create two conflicting branches and practice the merge dance.\n\n---\n\n## 🤝 Collaborating on GitHub\n1. **Fork** ⇒ get your own copy of a repository to work on.\n - Click the \"Fork\" button on the top right of the repo page.\n\n> 🧩 *Puzzle*: What’s the difference between forking and cloning?\n\n> 🏗️ *Third Quest*: Fork the repository of this class.\n\n2. **Clone** your fork.\nIn order to work on your forked repository, you need to clone it to your local machine:\n   ```bash\n   git clone <url-of-your-fork>\n   cd <your-fork-directory>\n   ```\n3. **Sync** with upstream.  \nIf the original repository has new changes, you can keep your fork up to date by syncing it with the upstream repository:\n   ```bash\n   git remote add upstream <url-of-original>\n   git fetch upstream\n   git rebase upstream/main\n   ```  \nHowever, this is much easier on the GitHub website.  \n   - Go to your forked repository on GitHub and sync it with the original repository by clicking the \"Sync fork\" button.\n\n4. **Push** & create a **Pull Request**.\nPull Requests (PRs) are how you propose changes to a project. After pushing your changes to your fork, go to the original repository and click \"New Pull Request\".\n\n> 🧩 *Puzzle*: What’s the difference between a Pull Request and a Merge?\n\n> 🏗️ *Fourth Quest*: Make a change in your fork, push it, and create a Pull Request to the original repository. Do this to add your name to your chosen *Lecture* (Both in the Readme file and in the class folder markdown file) and/or correct any of my many spelling mistakes.\n\n5. Celebrate with GIFs. 🎉\n\n---\n\n> 🏆 *End*: End of your first adventure. The rest is important to know so read it for the in-class test, but I will let you practice once it makes sense in your daily workflow.\n\n## 🧹 Undo & Fix\nGit is a powerful tool, but sometimes you make mistakes. Here are some common scenarios and how to fix them:\n\n| Situation | Command | Explanation |\n|-----------|---------|-------------|\n| Un‑stage a file | `git restore --staged file` | Put it back in working area |\n| Amend last commit | `git commit --amend` | Edit message or add files |\n| Time‑travel (soft) | `git reset --soft HEAD~1` | Keep changes staged |\n| Time‑travel (hard) | `git reset --hard HEAD~1` | WARNING: destroys work |\n| Deleted a branch too soon | `git reflog` | Find the commit hash & resurrect |\n\n---\n\n## 🛠️ Advanced Magic\n- **Stash spells**  \n  ```bash\n  git stash push -m \"WIP dragon taming\"\n  git stash list\n  git stash pop\n  ```\n\n- **Bisect detective**  \n  ```bash\n  git bisect start\n  git bisect bad          # current commit is broken\n  git bisect good v2.0.0  # last known good tag\n  ```\n  Git walks the commit tree to find the culprit!\n\n- **Cherry‑pick delicacy**  \n  ```bash\n  git cherry-pick <hash>\n  ```\n\n---\n\n## 🧾 Cheat Sheet","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"bash","category":"page"},{"location":"class01/background_materials/git_adventure_guide/#add-everything","page":"🚀 Git Adventure Guide","title":"add everything","text":"","category":"section"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"git add -A","category":"page"},{"location":"class01/background_materials/git_adventure_guide/#show-history-graph","page":"🚀 Git Adventure Guide","title":"show history graph","text":"","category":"section"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"git log –oneline –graph –all –decorate","category":"page"},{"location":"class01/background_materials/git_adventure_guide/#rename-a-branch","page":"🚀 Git Adventure Guide","title":"rename a branch","text":"","category":"section"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"git branch -m old-name new-name","category":"page"},{"location":"class01/background_materials/git_adventure_guide/#delete-local-and-remote-branch","page":"🚀 Git Adventure Guide","title":"delete local & remote branch","text":"","category":"section"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"git branch -d feature git push origin –delete feature ```","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"","category":"page"},{"location":"class01/background_materials/git_adventure_guide/#Next-Steps","page":"🚀 Git Adventure Guide","title":"🏁 Next Steps","text":"","category":"section"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"Watch Oh My Git! interactive game.\nFollow the legendary Pro Git book.\nExplore GitHub Actions for automation.","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"✉️ Send feedback: open an issue or PR—Git isn’t just code; it’s conversation!","category":"page"},{"location":"class01/background_materials/git_adventure_guide/","page":"🚀 Git Adventure Guide","title":"🚀 Git Adventure Guide","text":"","category":"page"},{"location":"class01/background_materials/git_adventure_guide/#2025-Git-Adventure-Guide","page":"🚀 Git Adventure Guide","title":"© 2025 Git Adventure Guide","text":"","category":"section"},{"location":"class01/background_materials/README/#Class-1-Background-Material-08/22/2025","page":"Class 1 Background Material - 08/22/2025","title":"Class 1 Background Material - 08/22/2025","text":"","category":"section"},{"location":"#Special-Topics-on-Optimal-Control-and-Learning-—-Fall-2025-(ISYE-8803-VAN)","page":"Home","title":"Special Topics on Optimal Control and Learning — Fall 2025 (ISYE 8803 VAN)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Georgia Institute of Technology – Fridays 2 pm ET","category":"page"},{"location":"","page":"Home","title":"Home","text":"Designers: Andrew Rosemberg & Michael Klamkin   Instructor: Prof. Pascal Van Hentenryck","category":"page"},{"location":"","page":"Home","title":"Home","text":"2025 cohort: TBD","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This student-led course explores modern techniques for controlling — and learning to control — dynamical systems. Topics range from classical optimal control and numerical optimization to reinforcement learning, PDE-constrained optimization (finite-element methods, Neural DiffEq, PINNs, neural operators), and GPU-accelerated workflows.","category":"page"},{"location":"#Prerequisites","page":"Home","title":"Prerequisites","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Solid linear-algebra background  \nProgramming experience in Julia, Python, or MATLAB  \nBasic ODE familiarity","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"}]
}
